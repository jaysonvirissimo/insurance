require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/leads", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Lead. As you add validations to Lead, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
   { name: "Foo Bar", state: "Arizona" } 
  }

  let(:invalid_attributes) {
   { name: "" } 
  }

  describe "GET /index" do
    it "renders a successful response" do
      Lead.create! valid_attributes
      get leads_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      lead = Lead.create! valid_attributes
      get lead_url(lead)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_lead_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      lead = Lead.create! valid_attributes
      get edit_lead_url(lead)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      let(:sales_office) { SalesOffice.create(state: "Arizona") }

      it "creates a new Lead" do
        sales_office
        expect {
          post leads_url, params: { lead: valid_attributes }
        }.to change(Lead, :count).by(1)
      end

      it "redirects to the sales office" do
        sales_office
        post leads_url, params: { lead: valid_attributes }
        expect(response).to redirect_to(sales_office_url(sales_office))
      end

      it "automatically assigns the lead to a sales office" do
        sales_office
        post leads_url, params: { lead: valid_attributes }
        expect(Lead.last.sales_office).to be_present
      end
    end

    context "with invalid parameters" do
      it "does not create a new Lead" do
        expect {
          post leads_url, params: { lead: invalid_attributes }
        }.to change(Lead, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post leads_url, params: { lead: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested lead" do
      lead = Lead.create! valid_attributes
      expect {
        delete lead_url(lead)
      }.to change(Lead, :count).by(-1)
    end

    it "redirects to the leads list" do
      lead = Lead.create! valid_attributes
      delete lead_url(lead)
      expect(response).to redirect_to(leads_url)
    end
  end
end
